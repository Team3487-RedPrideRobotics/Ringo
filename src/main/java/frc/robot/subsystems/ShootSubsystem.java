// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.Constants;
import frc.robot.Constants.shootConstants;
import com.revrobotics.CANSparkLowLevel;
import com.revrobotics.CANSparkMax;

import edu.wpi.first.math.system.plant.DCMotor;
import edu.wpi.first.wpilibj.simulation.FlywheelSim;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

public class ShootSubsystem extends SubsystemBase {
    public CANSparkMax leftShootMotor;
    public CANSparkMax rightShootMotor;
    private DCMotor dcMotor;
    private FlywheelSim flywheelSim;

    //TODO motor ids should probably be arguments passed to the constructor
    public ShootSubsystem() {
        leftShootMotor = new CANSparkMax(shootConstants.left_Shoot_Motor_ID, CANSparkLowLevel.MotorType.kBrushless);
        rightShootMotor = new CANSparkMax(shootConstants.right_Shoot_Motor_ID, CANSparkLowLevel.MotorType.kBrushless);
        dcMotor = new DCMotor(12, 0.0000000026, 150, 1.8, 594.39, 2);
        flywheelSim = new FlywheelSim(dcMotor, 1, 1);

    }

    @Override
    public void periodic() {
        Constants.shootEdits.shootSpeed = frc.robot.NTManager.shootSpeedSub.get();
        Constants.shootEdits.slowShootSpeed = frc.robot.NTManager.slowShootSpeedSub.get();
    }

    @Override
    public void simulationPeriodic() {
        
    }

    public void shoot(double speed){
        leftShootMotor.set(speed);
        rightShootMotor.set(-speed);
        flywheelSim.setInput(speed);
    }

}

